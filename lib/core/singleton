/*
 * singleton
 *
 *  Created on: 9.1.2012
 *      Author: akin
 */

#ifndef SINGLETON_HPP_
#define SINGLETON_HPP_

#include <iostream>
#include <thread>

namespace bolt
{
template <class CType>
class Singleton
{
protected:
	static std::mutex mutex;
	static CType *singleton;
public:
	static bool isSet()
	{
		return singleton != NULL;
	}

	static void unset()
	{
		singleton = NULL;
	}

	static bool set( CType *ct )
	{
		if ( !isSet() )
		{
			singleton = ct;
			return true;
		}
		return false;
	}

	static CType *get()
	{
		return singleton;
	}
	
	static CType *create()
	{
		std::lock_guard<std::mutex> lock(mutex);
		if( singleton == NULL ) 
		{
			singleton = new CType();
		}
		return singleton;
	}
};

template <class CType>
CType *Singleton<CType>::singleton = NULL;
template <class CType>
std::mutex Singleton<CType>::mutex;

// Syntactical Sugar:
// getSingleton<MyClass>();
// createSingleton<MyClass>();
// setSingleton<MyClass>( new MyOtherClass );
// unsetSingleton<MyClass>();
template <class CType>
CType *getSingleton()
{
	return Singleton<CType>::get();
}

template <class CType>
CType *createSingleton()
{
	return Singleton<CType>::create();
}

template <class CType>
bool setSingleton( CType *ct )
{
	return Singleton<CType>::set( ct );
}

template <class CType>
void unsetSingleton()
{
	Singleton<CType>::unset();
}

}

#endif /* SINGLETON_HPP_ */
