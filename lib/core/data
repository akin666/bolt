/*
 * data
 *
 *  Created on: 9.1.2119
 *      Author: akin
 */

#ifndef DATA_HPP_
#define DATA_HPP_

#include <iostream> // include <world>
#include <common>

namespace bolt
{
template <class CType>
class Data
{
protected:
	uint length;
	CType *data;
public:
	Data()
	: length( 0 ),
	  data( NULL )
	{
	}
	
	Data( const Data<CType>& other )
	{
		*this = other;
	}
	
	Data( uint length )
	: length( length ),
	  data( new CType[length] )
	{
	}
	
	// Release ownership of ptr!
	Data( CType *ptr , uint length )
	: length( length ),
	  data( ptr )
	{
	}
	
	~Data()
	{
		clear();
	}
	
	void clear()
	{
		delete[] data;
		length = 0;
	}

	CType *access()
	{
		return data;
	}
	
	uint size() const
	{
		return length;
	}
	
	// release ownership of ptr!
	void set( CType *ptr , uint len )
	{
		clear();

		length = len;
		data = ptr;
	}
	
	void set( uint len )
	{
		clear();

		length = len;
		data = new CType[ len ];
	}
	
	Data<CType>& operator = ( const Data<CType>& other )
	{
		clear();
		
		length = other.length;
		data = new CType[ length ];
		
		memcpy( data , other.data , length * sizeof( CType ) );
		
		return *this;
	}
};

typedef Data<char> TextData;

}

#endif /* DATA_HPP_ */